/// /// ///
/// Color Class Generator
///
/// Define class "color" and "color-text"
///
/// @package    kzarshenas/crazyphp
/// @author     kekefreedog <kevin.zarshenas@gmail.com>
/// @copyright  2022-2023 KÃ©vin Zarshenas
/// /// /// 

/// Utilisites
///////////////////////////////////////////////////////
///

/// Convert angle
/// 
/// @author Chris Eppstein
/// 
/// @param {Number} $value - Value to convert
/// @param {String} $unit - Unit to convert to
/// @return {Number} Converted angle
@function convert-angle($value, $unit) {
    $convertable-units: deg grad turn rad;
    $conversion-factors: 1 (10grad/9deg) (1turn/360deg) (3.1415926rad/180deg);

    @if index($convertable-units, unit($value)) and index($convertable-units, $unit) {
        @return $value / nth($conversion-factors, index($convertable-units, unit($value))) * nth($conversion-factors, index($convertable-units, $unit));
    }

    @warn "Cannot convert `#{unit($value)}` to `#{$unit}`.";
}

/// Test if `$value` is an angle
/// 
/// @param {*} $value - Value to test
/// @return {Bool}
/// 
@function is-direction($value) {
    $is-direction: index((to top, to top right, to right top, to right, to bottom right, to right bottom, to bottom, to bottom left, to left bottom, to left, to left top, to top left), $value);
    $is-angle: type-of($value)=='number' and index('deg''grad''turn''rad', unit($value));

    @return $is-direction or $is-angle;
}

/// Convert a direction to legacy syntax
/// 
/// @param {Keyword | Angle} $value - Value to convert
/// @require {function} is-direction
/// @require {function} convert-angle
@function legacy-direction($value) {
    @if is-direction($value)==false {
        @warn "Cannot convert `#{$value}` to legacy syntax because it doesn't seem to be an angle or a direction";
    }

    $conversion-map: (
        to top : bottom,
        to top right : bottom left,
        to right top : left bottom,
        to right : left,
        to bottom right : top left,
        to right bottom : left top,
        to bottom : top,
        to bottom left : top right,
        to left bottom : right top,
        to left : right,
        to left top : right bottom,
        to top left : bottom right
    );

@if map-has-key($conversion-map, $value) {
    @return map-get($conversion-map, $value);
}

@return 90deg - convert-angle($value, 'deg');
}

/// Declare color class
///////////////////////////////////////////////////////
///

/* Generate class for colors */
@each $color_name,
$color in $colors {

    @each $color_type,
    $color_value in $color {
        @if $color_type =="base" {

            /* Color */
            .#{$color_name} {
                background-color: $color_value  !important;
            }

            /* Color text */
            .#{$color_name}-text {
                color: $color_value  !important;
            }

            /* Color border */
            .#{$color_name}-border {
                border-color: $color_value  !important;
            }

            /* Light mode */
            @media (prefers-color-scheme: light) {

                /* Color */
                .light-mode-#{$color_name} {
                    background-color: $color_value  !important;
                }
    
                /* Color text */
                .light-mode-#{$color_name}-text {
                    color: $color_value  !important;
                }

                /* Color border */
                .light-mode-#{$color_name}-border {
                    border-color: $color_value  !important;
                }

            }

            /* Dark mode */
            @media (prefers-color-scheme: dark) {

                /* Color */
                .dark-mode-#{$color_name} {
                    background-color: $color_value  !important;
                }
    
                /* Color text */
                .dark-mode-#{$color_name}-text {
                    color: $color_value  !important;
                }

                /* Color border */
                .dark-mode-#{$color_name}-border {
                    border-color: $color_value  !important;
                }

            }

        }

        @else if $color_name  !="shades" {

            /* Color Shade */
            .#{$color_name}.#{$color_type} {
                background-color: $color_value  !important;
            }

            /* Color shade text */
            .#{$color_name}-text.text-#{$color_type} {
                color: $color_value  !important;
            }

            /* Color shade border */
            .#{$color_name}-border.border-#{$color_type} {
                border-color: $color_value  !important;
            }

            /* Light mode */
            @media (prefers-color-scheme: light) {

                /* Color Shade */
                .light-mode-#{$color_name}.#{$color_type}-light-mode {
                    background-color: $color_value  !important;
                }
    
                /* Color shade */
                .light-mode-#{$color_name}-text.text-#{$color_type}-light-mode {
                    color: $color_value  !important;
                }

                /* Color shade border */
                .light-mode-#{$color_name}-border.border-#{$color_type}-light-mode {
                    border-color: $color_value  !important;
                }

            }

            /* Dark mode */
            @media (prefers-color-scheme: dark) {

                /* Color Shade */
                .dark-mode-#{$color_name}.#{$color_type}-dark-mode {
                    background-color: $color_value  !important;
                }
    
                /* Color shade */
                .dark-mode-#{$color_name}-text.text-#{$color_type}-dark-mode {
                    color: $color_value  !important;
                }

                /* Color shade border */
                .dark-mode-#{$color_name}-border.border-#{$color_type}-dark-mode {
                    border-color: $color_value  !important;
                }

            }
        }
    }
}

/* Generate class for colors */
@each $color,
$color_value in $shades {

    /* Color */
    .#{$color} {
        background-color: $color_value  !important;
    }

    /* Color text */
    .#{$color}-text {
        color: $color_value  !important;
    }

    /* Color text */
    .#{$color}-border {
        border-color: $color_value  !important;
    }

    /* Light mode */
    @media (prefers-color-scheme: light) {

        /* Color */
        .light-mode-#{$color} {
            background-color: $color_value  !important;
        }

        /* Color text */
        .light-mode-#{$color}-text {
            color: $color_value  !important;
        }

        /* Color text */
        .light-mode-#{$color}-border {
            border-color: $color_value  !important;
        }

    }

    /* Dark mode */
    @media (prefers-color-scheme: dark) {

        /* Color */
        .dark-mode-#{$color} {
            background-color: $color_value  !important;
        }

        /* Color text */
        .dark-mode-#{$color}-text {
            color: $color_value  !important;
        }

        /* Color text */
        .dark-mode-#{$color}-border {
            border-color: $color_value  !important;
        }

    }

}

/// Mixin printing a linear-gradient 
/// as well as a plain color fallback 
/// and the `-webkit-` prefixed declaration
/// @access public
/// @param {String | List | Angle} $direction - Linear gradient direction
/// @param {Arglist} $color-stops - List of color-stops composing the gradient
@mixin linear-gradient($direction, $color-stops...) {
    @if is-direction($direction)==false {
        $color-stops: ($direction, $color-stops);
        $direction: 180deg;
    }

    background: nth(nth($color-stops, 1), 1);
    // Remove important
    background: linear-gradient($direction, $color-stops);
}

// Gradient color mixin 
@each $gcolor_name,
$gcolor in $gradient-colors {
  $start-color: map-get($gcolor, start-color);
  $end-color: map-get($gcolor, end-color);
  $direction: map-get($gcolor, direction);

  .#{$gcolor_name} {
    @include linear-gradient($direction, $start-color, $end-color);

    &.gradient-shadow {
      box-shadow: 0 6px 20px 0 rgba($end-color, 0.5) !important;
    }
  }
}